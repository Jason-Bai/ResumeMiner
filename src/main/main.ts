import { app, BrowserWindow, ipcMain } from "electron";
import { IPCMainChannels, IPCRendererChannels } from "./ipc/channels";
import { initDatabase, getRepository } from "./database";
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      nodeIntegration: false,
      contextIsolation: true,
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  if (MAIN_WINDOW_WEBPACK_ENTRY) {
    mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
  }

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// 注册 IPC 处理器
function registerIPC() {
  // 处理获取版本请求 ✅ 使用枚举值
  ipcMain.handle(IPCMainChannels.GET_APP_VERSION, async () => {
    try {
      return await app.getVersion();
    } catch (error) {
      console.error("Version check failed:", error);
      throw new Error("VERSION_CHECK_FAILED");
    }
  });

  // 获取所有简历
  ipcMain.handle(IPCMainChannels.GET_RESUMES, async () => {
    try {
      const { Resume: resumeRepository } = getRepository();

      return await resumeRepository.find();
    } catch (error) {
      console.error("Failed to get resumes:", error);
      throw new Error("FAILED_TO_GET_RESUMES");
    }
  });

  // 实现IPCMainChannels.GET_RESUME
  ipcMain.handle(IPCMainChannels.GET_RESUME, async (_, id: string) => {
    try {
      const { Resume: resumeRepository } = getRepository();
      return await resumeRepository.findOneBy({ id: parseInt(id) });
    } catch (error) {
      console.error("Failed to get resume:", error);
      throw new Error("FAILED_TO_GET_RESUME");
    }
  });

  // 更多处理程序...
  // 在主进程添加调试
  ipcMain.on(IPCRendererChannels.LOG_EVENT, (_, message) => {
    console.log("[Renderer Log]:", message);
  });
}

// 初始化简历数据
async function initResumeData() {
  const { Resume: resumeRepository } = getRepository();
  // 改为批量添加
  await resumeRepository.save([
    {
      name: "张三",
      position: "高级前端工程师",
      experience: "5年",
      education: "本科",
      updateTime: "2024-03-26",
    },
    {
      name: "李四",
      position: "全栈开发工程师",
      experience: "3年",
      education: "硕士",
      updateTime: "2024-03-25",
    },
  ]);
}

async function initDatabaseData() {
  await initResumeData();
}

async function clearResumeData() {
  const { Resume: resumeRepository } = getRepository();
  await resumeRepository.clear();
}

async function clearDatabaseData() {
  await clearResumeData();
}

// 清理数据的函数
async function cleanupOnExit() {
  // 如果是开发环境，请清空Resume数据
  if (process.env.NODE_ENV === "development") {
    await clearDatabaseData();
  }
}

// 处理应用退出事件
app.on("before-quit", async (event) => {
  event.preventDefault();
  await cleanupOnExit();
  app.exit();
});

// 处理 SIGINT 信号（Ctrl+C）
process.on("SIGINT", async () => {
  await cleanupOnExit();
  process.exit(0);
});

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", async () => {
  // 初始化数据库
  await initDatabase();
  // 如果是开发环境，请初始Resume数据用于renderer显示
  if (process.env.NODE_ENV === "development") {
    await initDatabaseData();
  }
  // 注册 IPC 处理器
  registerIPC();
  // 创建窗口
  createWindow();
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", async () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
